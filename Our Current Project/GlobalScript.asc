// main global script file

// called when the game starts, before the first room is loaded
function game_start()
{
  mouse.Mode = eModeLookat;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    QuitGame(1);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode);
  }
  else if (button == eMouseRight)
  {
    // right-click, so cycle the mouse cursor mode
    // mouse.SelectNextMode();
    mouse.Mode = eModeLookat;
  }
}

function dialog_request(int param) {
}
function ExamBttn_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeLookat;
}

function UseBttn_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeUsermode1;
}

function MoveBttn_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModePointer;
}

function TakeBttn_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModePickup;
}

function OpenBttn_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeInteract;
}

bool IsPlaying(AudioClip *check){
  int i;
  AudioClip *current = null;
  for(i=0;i<System.AudioChannelCount;i++){
    current = System.AudioChannels[i].PlayingClip;
    if (current!=null){
      if (check.ID == current.ID) {i=-1; break;}
    }
  }
  return (i==-1);
}

int numLines(String text){
  if (text.Length<=34) return 1;
  int lines = 0;
  int pos = 0;
  int oldPos = 0;
  int curLine = 0;
  String curText;
  while(oldPos<text.Length){
    curText = text.Substring(oldPos, text.Length-oldPos);
    pos = curText.IndexOf(" ");
    if (pos<0) pos=curText.Length;
    if (curLine+pos>34){
      lines++;
      curLine=pos;
      oldPos += pos+1;
    }
    else {
      curLine += pos+1;
      oldPos += pos+1;
    }
  }
  for(pos=0;pos<text.Length;pos++) if(text.Chars[pos]=='[') lines++;
  return lines;
}

int firstLine(String text){
  for(int i=0;i<=34;i++) if(text.Chars[i]=='[') return i+1;
  if (text.Length<=34) return text.Length;
  int pos = 0;
  int oldPos = 0;
  int curLine = 0;
  String curText;
  while(oldPos<text.Length){
    curText = text.Substring(oldPos, text.Length-oldPos);
    pos = curText.IndexOf(" ");
    if (pos<0) pos=curText.Length;
    if (curLine+pos>34){
      return oldPos;
    }
    else {
      curLine += pos+1;
      oldPos += pos+1;
    }
  }
}

function progText(Label *BOX,  String text,  bool clear){
  if (clear) BOX.Text = "";
  else BOX.Text = BOX.Text.Append("[");
  for(int i=0;i<text.Length;i++){
    BOX.Text = BOX.Text.Append(text.Substring(i, 1));
    Wait(2);
    if (numLines(BOX.Text)>4) {
      WaitMouseKey(40);
      for(int j=0;j<4;j++){BOX.Text = BOX.Text.Substring(firstLine(BOX.Text), BOX.Text.Length-firstLine(BOX.Text));WaitMouseKey(40);}
    }
  }
}

